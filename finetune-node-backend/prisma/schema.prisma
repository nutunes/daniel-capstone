generator client {
  provider = "prisma-client-js"
}

generator pyclient {
  provider = "prisma-client-py"
  output   = "../../finetune-python-backend/prisma_client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Instrument_Recognition {
  id                        Int      @id @default(autoincrement())
  name                      String   @unique
  instruments               String[]
  weights                   Json
  means                     Json
  stds                      Json
  instrument_average_values Float[]
}

model User {
  id                  String         @id @default(uuid())
  username            String         @unique
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  hashedPassword      String
  displayName         String?
  spotifyRefreshToken String?
  updateRegression    Boolean        @default(true)
  regressionWeights   Float[]
  featureMeans        Float[]
  featureStds         Float[]
  recommendedSongs    Song[]         @relation("RecommendedSongs")
  dislikedSongs       Song[]         @relation("DislikedSongs")
  likedSongs          Song[]         @relation("LikedSongs")
  notifications       Notification[] @relation("UserNotifications")
  recentSongIds       String[]
}

model Song {
  id             String  @id @default(uuid())
  spotify_id     String  @unique
  title          String
  album          String
  recording_mbid String  @unique
  mfccs          Float[]
  isrc           String  @unique
  instruments    Float[]
  recommendedTo  User[]  @relation("RecommendedSongs")
  dislikedBy     User[]  @relation("DislikedSongs")
  likedBy        User[]  @relation("LikedSongs")
}

model Unavailable_Songs {
  spotify_id String @id
}

model Notification {
  id          String  @id @default(uuid())
  subject     String
  content     String
  userId      String
  read        Boolean
  destination User    @relation("UserNotifications", fields: [userId], references: [id])
}
